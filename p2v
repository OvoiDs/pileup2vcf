#!/usr/bin/env python2
# encoding: utf-8
#
### CHANGELOG ###
# 1.2: Add support for InDel detection method.
#      - The method used is depth analysis: by segmenting genome's depth, we can spot InDels.
#      - In order to do that, we launch SegmentIt, and gather the segments.
#      - These segments will point to the InDels.
# 1.1: Added flag for multiple indels at position
# 1.1: Added possibility for non-ref variants (ex: ref=A, variant=C/G)
#
### LICENCE: GNU GPLv3

from operator import itemgetter, attrgetter
from argparse import ArgumentParser, SUPPRESS, RawDescriptionHelpFormatter
from collections import defaultdict, OrderedDict
import gzip
import sys
from decimal import *
#from scipy.stats import fisher_exact as fisher
from array import array
import numpy as np
from time import clock
#from matplotlib import pyplot as plt
#from Bio.Statistics.lowess import lowess

from GenoPy.Genomic import *
from GenoPy.Variants import *
from General.IO import *
from GenoPy.MPileup import *
from GenoPy.InDels import *
from GenoPy.DepthProfile import DepthProfile
from GenoPy.Bins import *
from GenoPy.VCF import *


#from GenoPy.Somatic import *

DEBUG=True
VERSION="1.3"
DEVELOPMENT=True
UNSTABLE=True

###############################################################################
############################### Desc & Epilog #################################
###############################################################################

DESCRIPTION='''p2v (v{})
Simple variant caller
Github: https://github.com/OvoiDs/pileup2vcf'''.format(VERSION)
EPILOG=''

if UNSTABLE:
    EPILOG += "This is an unstable version\n"
if DEVELOPMENT:
    EPILOG += "This is a development version\n"


###############################################################################
###############################  Main   #######################################
###############################################################################

parser = ArgumentParser(description=DESCRIPTION, epilog=EPILOG, prog="p2v", formatter_class=RawDescriptionHelpFormatter)
parser.add_argument("-i", "--input", dest="input", type=str, required=False, help="Please input the VCF file outputed by IonTorrent VariantCaller") # pass to false to launch somatic mod
parser.add_argument("-R", "--refGenome", dest="refGenome", required=True, help="Please give as input the Fasta file of the genome you used to align your sequences")
parser.add_argument("-r", "--regions", dest="regions", required=True, help="Please give as input a BED file describing the regions you sequenced")
parser.add_argument("-o", "--outputPrefix", dest="prefix", default=None, required=True, help="This is a prefix that will be prepended to all default filenames. When using this option, you will get every output by default")
parser.add_argument("--minFreq", dest="minFreq", type=float, required=False, help="Please input the minimum frequency of the variants you want reported. [0.01]")
parser.add_argument("--minDepth", dest="minDepth", type=int, required=False, help="Please input minimum depth for variant calling. [100]")
parser.add_argument("--minReadsAlt", dest="minReadsAlt", type=int, required=False, help="Minimum reads supporting ALT to call a variant [5]")
parser.add_argument("--strandBias", dest="strandBias", type=int, required=False, help="This is supposed to be the threshold for maximum strand bias: if more than <value> percents reads are on one strand, the variant will be discarded. [90]")
parser.add_argument("--minReadQuality", dest="minReadQuality", type=int, required=False, help="The variants supported by at least one read with base quality upper than <value> quality on the base are not discard, whereas the others are discard. [20]")
parser.add_argument("--minReadQualityCov", dest="minReadQualityCov", type=int, required=False, help="The variants supported by at least <value> reads with base quality upper than <--minReadQuality value> quality on the base are not discard, whereas the others are discard. [1]")
parser.add_argument("--meanReadQuality", dest="meanReadQuality", type=float, required=False, help="The variants supported by reads having a base quality mean upper than <value> are not discard, whereas the others are discarded. [20]")
parser.add_argument("--minMappingQuality", dest="minMappingQuality", type=int, required=False, help="The variants supported by at least one read with mapping quality upper than <value> quality on the base are not discard, whereas the others are discard. [50]")
parser.add_argument("--minMappingQualityCov", dest="minMappingQualityCov", type=int, required=False, help="The variants supported by at least <value> read with mapping quality upper than <--minMappingQuality value> quality on the base are not discard, whereas the others are discard. [1]")
parser.add_argument("--meanMappingQuality", dest="meanMappingQuality", type=float, required=False, help="The variants supported by reads having a mapping quality mean upper than <value> are not discard, whereas the others are discarded. [50]")
parser.add_argument("--fisherBias", dest="fisherBias", type=float, required=False, help="This is another indicator for strand bias. A Fisher Exact Test is computer for reference and alternate contigency tables. The p-value is then phred scaled. High values indicate more bias. [60]")
parser.add_argument("--quality", dest="quality", type=int, required=False, help="This allows to filter on quality. Quality shows the distance between called allele and other alleles at this position [10]")
parser.add_argument("--localStrandBias", dest="localStrandBias", required=False, type=int, help="Local strand bias. This checks for desequilibrium between forward and reverse strand in alternate allele [100 (deactivated)]")
parser.add_argument("-D", "--minDeltaDepthToCallIndels", dest="minDeltaDepth", required=False, help="This is the minimum delta depth between 2 positions used in order to call for an InDel event [200]")
parser.add_argument("-F", "--maxDeltaDeltaDepthToCallTrueIndel", dest="maxDeltaDelta", required=False, help="This is the maximum delta between two delta depth not to filter the event as a false positive [300]")
parser.add_argument("-T", "--toleranceToDetectFalseStopInBigIndels", dest="tolerance", type=float, required=False, help="Lets define two delta-depth values, X1 and X2, which describes the gain or loss of sequencing depth flanking an event. This tolerance value ensures that X1 + tolerance < X2 < X1 - tolerance" )

parser.add_argument("--hetTreshold", dest="hetTreshold", required=False, type=int, help="Treshold on variant frequency to call a heterozygous genotype [20]")
parser.add_argument("--homTreshold", dest="homTreshold", required=False, type=int, help="Treshold on variant frequency to call a homozygous genotype [75]")
parser.add_argument("--snpCluster", dest="snpCluster", required=False, type=int, help="How many consecutive variants to filter out as snpCluster ? [3]")
parser.add_argument("--snpClusterWindowSize", dest="snpClusterWindowSize", required=False, type=int, help="Size of the window used for snpCluster filter computation [20bp]")
parser.add_argument("--minBinSize", dest="minBinSize", required=False, help="Minimum size of any Bin to be called. A bin will not be called if there is less than this number of positions. Put 0 to deactivate. [5]")
parser.add_argument("--maxBinSize", dest="maxBinSize", required=False, help="Maximum size of any Bin to be called. A new bin will be created each time this size is reached. [50]")
parser.add_argument("--indelWindowLength", dest="indelWindowLength", type=int, required=False, help="By default, the IndelDetector will buffer X nucleotides before starting scanning. You can change X with this argument.")

parser.add_argument("--loglevel", dest="ll", required=False, help="Loglevel: 1: normally verbose; 5: debug mode [1]")
parser.add_argument('--disableQualityScoreCheck', dest="disableQualityScoreCheck", default=False, action="store_true", help="Disables the quality score check")


parser.add_argument("--clinics", action='store_true', dest="clinics", required=False, help="Presets all the filters for clinical uses. Please not that this cannot be overwritten by parameters you would enter.")
parser.add_argument("--nofilter", action='store_true', dest="nofilter", required=False, help="Disables all filters. Please note that this cannot be overwritten by parameters you would enter.")
parser.add_argument('--gsc', dest="gsc", default=False, action="store_true", required=False, help="Somatic genetics thresholds. Please look at the code before use !")
parser.add_argument('--somatic', dest="somatic", default=False, action="store_true", required=False, help="Launch somatic mod. Execute the pipeline for both Normal and Tumoral mpileup, and compare variants listed in each conditions.")
parser.add_argument("--inputNormal", dest="inputNormal", type=str, required=False, help="Please input the mpileup Normal file")
parser.add_argument("--inputTumoral", dest="inputTumoral", type=str, required=False, help="Please input the mpileup Tumoral file")
parser.add_argument("--methodFDR", dest="methodFDR", type=str, required=False, help="Choose between the FDR calculation method from : bonferroni, fdr_bh or fdr_tsbh [fdr_bh]")
parser.add_argument("--alphaFDR", dest="alphaFDR", type=float, required=False, help="Set the alpha error for the multiple test correction [0.05]")
parser.add_argument("--mutipleTestSum", dest="mutipleTestSum", default=True, action="store_false", required=False, help="If multiple alternatives their frquencies are add in order to compute the fisher exact test for 2*2 contingency table in all cases [True]")


parser.add_argument('--windowKAll', dest="windowKAll", default=False, action="store_true", required=False, help="Moving window of size --kSize in order to compute the BED regions according to their coverage by all variants (all mpileup lines except lines without variants) and SNP cluster. Filter the variants having more than --clusterN others variants in a window of --sizeK. [False]")
parser.add_argument('--windowKGood', dest="windowKGood", default=False, action="store_true", required=False, help="Moving window of size --kSize in order to compute the BED regions according to their coverage by good variants and SNP cluster (Useless if --windowKAll is set). Do not filter any variant, just compute coverage and group cluster SNP files. [False]")
parser.add_argument('--sizeK', dest="sizeK", required=False, help="Size (in base) of the moving window in order to compute the BED regions according to their coverage by good variants. Must be an integer pair and positive. [100]")
parser.add_argument('--clusterN', dest="clusterN", required=False, help="Maximal number of SNP in a window of --sizeK (in base). Must be an positive integer. [10]")

parser.add_argument("--SSRlist", dest="SSRlist", type=str, required=False, help="Please input the SSR list Bed file (no header with format : chr\tbeg\tend). Default : Bed/SSR_list_msisensor.bed.")
parser.add_argument('--windowKSSR', dest="windowKSSR", default=False, action="store_true", required=False, help="Filter the variants located in known SSR (--SSRlist). [False]")

parser.add_argument('--filterAndParse', dest="filterAndParse", default=False, action="store_true", required=False, help="Filter the variants when reading the mpileup file. The not good variants will be written in a file named ... Be carreful some filter can't be applied because variants are filters while reading. [False]")

parser.add_argument('--ncpu', dest='ncpu', help=SUPPRESS)
parser.add_argument('--tmpDir', dest='tmpDir', help=SUPPRESS)
parser.add_argument('--overrideInputPP2V', dest="overrideInput", help=SUPPRESS)
parser.add_argument('--overrideOutputPP2V', dest="overrideOutput", help=SUPPRESS)
parser.add_argument('--silent', dest='silent', action="store_true", help=SUPPRESS)

# Parametres

defaults = {'fisherBias': 60, 'disableQualityScoreCheck': False, 'hetTreshold': 20, 'quality': 10, 'minDepth': 100, 'maxDeltaDelta': 400, 'll': 1, 'tolerance': 0.15, 'strandBias': 90, 'localStrandBias': 100, 'homTreshold': 75, 'minDeltaDepth': 200, 'minBinSize': 5, 'minReadsAlt': 5, 'maxBinSize': 50, 'indelWindowLength': 50, 'gsc': False, 'minFreq': 0.01}

args = parser.parse_args()
parameters = defaultdict(bool)
if args.clinics is True:
    parameters['minFreq'] = 15 if args.minFreq is None else float(args.minFreq)
    parameters['minDepth'] = 20 if args.minDepth is None else int(args.minDepth)
    parameters['strandBias'] = 5 if args.strandBias is None else int(args.strandBias)
    parameters['fisherStrand'] = 250 if args.fisherBias is None else float(args.fisherBias)
    parameters['minReadsAlt'] = 20 if args.minReadsAlt is None else int(args.minReadsAlt)
    parameters['minQuality'] = 50 if args.quality is None else float(args.quality)
    parameters['localStrandBias'] = 90 if args.localStrandBias is None else int(args.localStrandBias)
    parameters['hetTreshold'] = 20 if args.hetTreshold is None else int(args.hetTreshold)
    parameters['homTreshold'] = 70 if args.homTreshold is None else int(args.homTreshold)
    parameters['toleranceForBigIndels'] = 0.20 if args.tolerance is None else float(args.tolerance)
    parameters['minDeltaDepth'] = 110 if args.minDeltaDepth is None else int(args.minDeltaDepth)
    parameters['minReadQuality'] = 20 if args.minReadQuality is None else float(args.minReadQuality)
    parameters['minReadQualityCov'] = 1 if args.minReadQualityCov is None else float(args.minReadQualityCov)
    parameters['meanReadQuality'] = 20 if args.meanReadQuality is None else float(args.meanReadQuality)
    parameters['minMappingQuality'] = 50 if args.minMappingQuality is None else float(args.minMappingQuality)
    parameters['minMappingQualityCov'] = 1 if args.minMappingQualityCov is None else float(args.minMappingQualityCov)
    parameters['meanMappingQuality'] = 50 if args.meanMappingQuality is None else float(args.meanMappingQuality)
    print args.minMappingQuality
    print args.minReadQuality
    
elif args.gsc is True:
    parameters['minFreq'] = 5 if args.minFreq is None else float(args.minFreq)
    parameters['minDepth'] = 20 if args.minDepth is None else int(args.minDepth)
    parameters['minReadsAlt'] = 5 if args.minReadsAlt is None else int(args.minReadsAlt)
    parameters['minQuality'] = 30 if args.quality is None else float(args.quality)
    parameters['localStrandBias'] = 95 if args.localStrandBias is None else int(args.localStrandBias)
    parameters['fisherStrand'] = 60 if args.fisherBias is None else float(args.fisherBias)
    parameters['strandBias'] = 90 if args.strandBias is None else int(args.strandBias)
    parameters['hetTreshold'] = 20 if args.hetTreshold is None else int(args.hetTreshold)
    parameters['homTreshold'] = 75 if args.homTreshold is None else int(args.homTreshold)
    parameters['toleranceForBigIndels'] = 0.15 if args.tolerance is None else float(args.tolerance)
    parameters['minDeltaDepth'] = 200 if args.minDepthDepth is None else int(args.minDeltaDepth)
    parameters['minReadQuality'] = 20 if args.minReadQuality is None else float(args.minReadQuality)
    parameters['minReadQualityCov'] = 1 if args.minReadQualityCov is None else float(args.minReadQualityCov)
    parameters['meanReadQuality'] = 20 if args.meanReadQuality is None else float(args.meanReadQuality)
    parameters['minMappingQuality'] = 50 if args.minMappingQuality is None else float(args.minMappingQuality)
    parameters['minMappingQualityCov'] = 1 if args.minMappingQualityCov is None else float(args.minMappingQualityCov)
    parameters['meanMappingQuality'] = 50 if args.meanMappingQuality is None else float(args.meanMappingQuality)
    
elif args.nofilter is True:
    parameters['minFreq'] = 0 if args.minFreq is None else float(args.minFreq)
    parameters['minDepth'] = 0 if args.minDepth is None else int(args.minDepth)
    parameters['strandBias'] = 0 if args.strandBias is None else int(args.strandBias)
    parameters['fisherStrand'] = 10000000 if args.fisherBias is None else float(args.fisherBias)
    parameters['minReadsAlt'] = 0 if args.minReadsAlt is None else int(args.minReadsAlt)
    parameters['minQuality'] = 0 if args.quality is None else float(args.quality)
    parameters['localStrandBias'] = 0 if args.localStrandBias is None else int(args.localStrandBias)
    parameters['hetTreshold'] = 20 if args.hetTreshold is None else int(args.hetTreshold)
    parameters['homTreshold'] = 75 if args.homTreshold is None else int(args.homTreshold)
    parameters['toleranceForBigIndels'] = 0.20 if args.tolerance is None else float(args.tolerance)
    parameters['minDeltaDepth'] = 200 if args.minDeltaDepth is None else int(args.minDeltaDepth)
    parameters['minReadQuality'] = 0 if args.minReadQuality is None else float(args.minReadQuality)
    parameters['minReadQualityCov'] = 0 if args.minReadQualityCov is None else float(args.minReadQualityCov)
    parameters['meanReadQuality'] = 0 if args.meanReadQuality is None else float(args.meanReadQuality)
    parameters['minMappingQuality'] = 0 if args.minMappingQuality is None else float(args.minMappingQuality)
    parameters['minMappingQualityCov'] = 0 if args.minMappingQualityCov is None else float(args.minMappingQualityCov)
    parameters['meanMappingQuality'] = 0 if args.meanMappingQuality is None else float(args.meanMappingQuality)
    
else:
    parameters['minFreq'] = float(args.minFreq) if args.minFreq is not None else float(defaults['minFreq'])
    parameters['minDepth'] = int(args.minDepth) if args.minDepth is not None else int(defaults['minDepth'])
    parameters['strandBias'] = int(args.strandBias) if args.strandBias is not None else int(defaults['strandBias'])
    parameters['fisherStrand'] = float(args.fisherBias) if args.fisherBias is not None else float(defaults['fisherBias'])
    parameters['minQuality'] = float(args.quality) if args.quality is not None else float(defaults['quality'])
    parameters['minReadsAlt'] = int(args.minReadsAlt) if args.minReadsAlt is not None else int(defaults['minReadsAlt'])
    parameters['localStrandBias'] = int(args.localStrandBias) if args.localStrandBias is not None else int(defaults['localStrandBias'])
    parameters['toleranceForBigIndels'] = float(args.tolerance) if args.tolerance is not None else float(defaults['tolerance'])
    parameters['hetTreshold'] = int(args.hetTreshold) if args.hetTreshold is not None else int(defaults['hetTreshold'])
    parameters['homTreshold'] = int(args.homTreshold) if args.homTreshold is not None else int(defaults['homTreshold'])
    parameters['minDeltaDepth'] = int(args.minDeltaDepth) if args.minDeltaDepth is not None else int(defaults['minDeltaDepth'])
    parameters['minReadQuality'] = 20 if args.minReadQuality is None else float(args.minReadQuality)
    parameters['minReadQualityCov'] = 1 if args.minReadQualityCov is None else float(args.minReadQualityCov)
    parameters['meanReadQuality'] = 20 if args.meanReadQuality is None else float(args.meanReadQuality)
    parameters['minMappingQuality'] = 50 if args.minMappingQuality is None else float(args.minMappingQuality)
    parameters['minMappingQualityCov'] = 1 if args.minMappingQualityCov is None else float(args.minMappingQualityCov)
    parameters['meanMappingQuality'] = 50 if args.meanMappingQuality is None else float(args.meanMappingQuality)

#For moving window with SNP cluster
if(args.windowKGood or args.windowKAll):
    if(args.windowKGood and args.windowKAll):
        print "[Error] Can't set both of --windowKAll and --windowKGood in the same time because the SNP cluster group of each variant for --windowKAll will be replace by the one for --windowKGood. Please use only one of these 2 arguments."
        sys.exit()
    if(int(args.sizeK) % 2 != 0 or int(args.sizeK) < 0):
        print "[Error] --SizeK argument must be a pair and positive integer. Please try again."
	sys.exit()
    else:
        parameters['sizeK'] = 100 if args.sizeK is None else int(args.sizeK)
    parameters['clusterN'] = 10 if args.clusterN is None else int(args.clusterN)
    
#For moving window with SSR cluster
if(args.windowKSSR):
    parameters['SSRlist'] = "Bed/SSR_list_msisensor.bed" if args.SSRlist is None else args.SSRlist
#add a test on format is not none (test if 3 columns)

parameters['somatic'] = args.somatic
parameters['inputNormal'] = args.inputNormal
parameters['inputTumoral'] = args.inputTumoral
parameters['methodFDR'] = "fdr_bh" if args.methodFDR is None else str(args.methodFDR)
parameters['alphaFDR'] = 0.05 if args.alphaFDR is None else float(args.alphaFDR)
parameters['mutipleTestSum'] = True if args.mutipleTestSum is None else False

if (parameters['somatic'] == False):
	parameters['prefix'] = args.prefix
	if parameters['prefix'] is not None:
	    parameters['output'] = parameters['prefix'] + ".GoodVariants.vcf"
	    parameters['statistics'] = parameters['prefix'] + ".statistics"
	    parameters['outputBins'] = parameters['prefix'] + ".bins"
	    parameters['depthProfile'] = parameters['prefix'] + ".depthprofile"
	    parameters['outputTrash'] = parameters['prefix'] + ".Trash.vcf"
	    parameters['regionsw'] = parameters['prefix'] + ".bed"

	parameters['input'] = args.input
	parameters['minBinSize'] = int(args.minBinSize) if args.minBinSize is not None else int(defaults['minBinSize'])
	parameters['maxBinSize'] = int(args.maxBinSize) if args.maxBinSize is not None else int(defaults['maxBinSize'])
	parameters['regions'] = args.regions
	parameters['sName'] = args.input.rstrip('.mpileup') if args.input.endswith('.mpileup') else args.input.rstrip('.pileup')
	parameters['onlyBed'] = True
	parameters['ll'] = int(args.ll) if args.ll is not None else int(defaults['ll'])
	parameters['refGenome'] = args.refGenome
	parameters['maxDeltaDelta'] = int(args.maxDeltaDelta) if args.maxDeltaDelta is not None else int(defaults['maxDeltaDelta'])

	parameters['IndelWindowLength'] = args.indelWindowLength if args.indelWindowLength is not None else defaults['indelWindowLength']
	parameters['DisableQualityScoreCheck'] = args.disableQualityScoreCheck if args.disableQualityScoreCheck is not None else defaults['disableQualityScoreCheck']

	if args.overrideInput: parameters['input'] = args.overrideInput
	if args.overrideOutput: parameters['prefix'] = args.overrideOutput
	if args.silent: parameters['ll'] = -1

	io = IO(parameters['ll'])
	parameters['io'] = io
	io.log("Command line: {}".format(' '.join(sys.argv)), loglevel=1)
	io.register("mpileupCount", parameters['input'], "r")
	getLinesH = io.getIO("mpileupCount")

	lineNb = getLineCount(getLinesH)

	parameters['lineNb'] = lineNb
	io.log(parameters, loglevel=2)

	io.giveupIO("mpileupCount")

	io.register("mpileup", parameters['input'], "r")
	io.register("binningW", parameters['outputBins'], "w")
	io.register("depthProfile", parameters['depthProfile'] + ".withoutMut", "w")
	io.register("statistics", parameters['statistics'], "w")
	io.register("GoodVariants", parameters['output'], "w")
	io.register("TrashedVariants", parameters['outputTrash'], 'w')
	io.register('regions', parameters['regions'], 'r')
	io.register("bedW", parameters['regionsw'], "w")

	# Instanciation de Bed et parsing du fichier.
	bed = Bed()
	bedIn = io.getIO('regions')
	bed.parse(bedIn)
	io.giveupIO('regions')
	

	# Instanciation de MPileup et parsing du fichier.
	pileuph = io.getIO('mpileup')
	depthProfile = DepthProfile(io.getIO('depthProfile'), io)
	pileup = MPileup(pileuph, depthProfile, io, parameters, bed=bed)

	parseAndFilter = False
	if(args.filterAndParse):
		parseAndFilter = True
		io.register("TrashedVariantsWhileReading", parameters['outputTrash']+ ".whileReading", 'w')
		unclassified_variants = pileup.parseAndFilter(True,False,False,io.getIO('TrashedVariantsWhileReading'))
		io.giveupIO('TrashedVariantsWhileReading')
	else:
		if(args.windowKAll):
			io.register("WindowKSNPAllCov", parameters['prefix'] + ".All.WindowKSNP.cov.bed", "w") #Fichier pour la couverture
			io.register("WindowKSNPAllGroup", parameters['prefix'] + ".All.WindowKSNP.group", "w") #Fichier pour l'équivalence des groupes 
			unclassified_variants = pileup.parseAndWindowK(True,False, False, io.getIO('WindowKAllCov'), io.getIO('WindowKAllGroup'), parameters['sizeK'], parameters['clusterN'], True)
			io.giveupIO('WindowKSNPAllCov')
			io.giveupIO('WindowKSNPAllGroup')
		else:
			print "WE ARE OK"
			print "{}".format(parseAndFilter)
			unclassified_variants = pileup.parse(True,False,False)
	good, trashed = unclassified_variants.classify_variants(parseAndFilter).getCollections()

	AllCollections = AllClassifiedVariantCollections(parameters)
	AllCollections.add('Good', good)
	AllCollections.add('Trash', trashed)


	# We will parse depthProfile and write it again to integrate variants (sadly, I have no other choice)
	io.register('depthProfileAddMutW', parameters['depthProfile'], "w")
	io.register('depthProfileAddMutR', parameters['depthProfile'] + ".withoutMut", "r")

	depthProfile.addVariants(unclassified_variants)

	io.giveupIO('mpileup')
	io.unregister('depthProfileAddMutR')
	io.unregister('depthProfileAddMutW')

	io.register("depthProfileR1", parameters['depthProfile'], "r")
	io.register("depthProfileR2", parameters['depthProfile'], "r")
	indels = scanForIndels(parameters)
	allIndels = InDelDetector(indels)
	allIndels = allIndels.extract().genotype(parameters).getIndels()
	readDepthProfile = io.getIO('depthProfileR1')
	binningW = io.getIO('binningW')
	binning = Binning(binningW, parameters)
	binning.bin(readDepthProfile)

	#pileup.addIndelsToVCF()
	io.giveupIO('binningW')
	io.giveupIO('depthProfileR1')
	io.giveupIO('depthProfileR2')

	# Output des résultats.
	# Binning
	#io.register('binningR', parameters['outputBins'], "r")
	#binningR = io.getIO('binningR')
	# # Regular: show all features
	#pileup.printBinning(binningR)
	# # Bed: show each region in plot.
	#pileup.alternateBinningPrinting(binningR)

	#indelsToAdd=allIndels
	goodVCF = VCF(good, parameters, allIndels)
	if(args.windowKGood):
		io.register("WindowKSNPGoodCov", parameters['prefix'] + ".GoodVariants.WindowKSNP.cov.bed", "w")
		io.register("WindowKSNPGoodGroup", parameters['prefix'] + ".GoodVariants.WindowKSNP.group", "w")
		goodVCF.printWindowK(io.getIO('WindowKGoodCov'), io.getIO('WindowKGoodGroup'), parameters['sizeK'], True)
		io.giveupIO('WindowKSNPGoodCov')
		io.giveupIO('WindowKSNPGoodGroup')
		
	goodVCF.printVCF(io.getIO('GoodVariants'), printHeader=True)
	#pileup.printVCF(goodVariants)
	io.giveupIO('GoodVariants')
	#indelsToAdd=allIndels
	trashVCF = VCF(trashed, parameters, allIndels)
	trashVCF.printVCF(io.getIO('TrashedVariants'), printHeader=True)
	io.giveupIO('TrashedVariants')

	stath = io.getIO('statistics')
	AllCollections.do_stats(stath)
	io.giveupIO('statistics')

	bedW = io.getIO('bedW')
	bed.write(bedW)
	io.giveupIO('bedW')
	io.endlog()

	if(args.windowKSSR):
		io.register("SSRlist", parameters['SSRlist'], "r")
		io.register("GoodVariantsOutOfSSR", parameters['prefix'] + ".GoodVariantsOutOfSSR", "w")
		io.register("TrashVariantsInSSR", parameters['prefix'] + ".TrashVariantsInSSR", "w")
		goodVCF.printVCFUsingSSR(parameters['SSRlist'],io.getIO('GoodVariantsOutOfSSR'),io.getIO('TrashVariantsInSSR'),True)
		io.giveupIO('GoodVariantsOutOfSSR')
		io.giveupIO('TrashVariantsInSSR')
		io.giveupIO('SSRlist')
	
	sys.exit(io.unregister("all"))
else:
	print "No somatic mod"
	#somaticMod(parameters, args, defaults)
